From 3d727c927c05a2c4bdb2e23f86c4a90d9a9812b9 Mon Sep 17 00:00:00 2001
From: Jerome Duval <jerome.duval@gmail.com>
Date: Wed, 21 Dec 2016 22:21:56 +0000
Subject: gcc2 patch


diff --git a/src/files.c b/src/files.c
index 033b963..5838042 100644
--- a/src/files.c
+++ b/src/files.c
@@ -1991,6 +1991,7 @@ bool write_file(const char *name, FILE *f_open, bool tmp,
     if (method == OVERWRITE && !tmp) {
 	/* If we must set the filename, and it changed, adjust things. */
 	if (!nonamechange && strcmp(openfile->filename, realname) != 0) {
+		char *newname;
 #ifndef DISABLE_COLOR
 	    char *oldname = openfile->syntax ? openfile->syntax->name : "";
 	    filestruct *line = openfile->fileage;
@@ -2002,7 +2003,7 @@ bool write_file(const char *name, FILE *f_open, bool tmp,
 	    color_update();
 	    color_init();
 
-	    char *newname = openfile->syntax ? openfile->syntax->name : "";
+	    newname = openfile->syntax ? openfile->syntax->name : "";
 
 	    /* If the syntax changed, discard and recompute the multidata. */
 	    if (strcmp(oldname, newname) != 0) {
diff --git a/src/rcfile.c b/src/rcfile.c
index e751d86..0111121 100644
--- a/src/rcfile.c
+++ b/src/rcfile.c
@@ -879,6 +879,8 @@ void grab_and_store(const char *kind, char *ptr, regexlisttype **storage)
 /* Parse and store the name given after a linter/formatter command. */
 void pick_up_name(const char *kind, char *ptr, char **storage)
 {
+	char* p;
+	char* q;
     assert(ptr != NULL);
 
     if (!opensyntax) {
@@ -899,8 +901,8 @@ void pick_up_name(const char *kind, char *ptr, char **storage)
 	*storage = NULL;
     else if (*ptr == '"') {
 	*storage = mallocstrcpy(NULL, ++ptr);
-	char* q = *storage;
-	char* p = *storage;
+	q = *storage;
+	p = *storage;
 	/* Snip out the backslashes of escaped characters. */
 	while (*p != '"') {
 	    if (*p == '\0') {
diff --git a/src/text.c b/src/text.c
index fc92d11..8e5e5c0 100644
--- a/src/text.c
+++ b/src/text.c
@@ -654,11 +654,13 @@ void undo_cut(undo *u)
 /* Redo a cut, or undo an uncut. */
 void redo_cut(undo *u)
 {
+	filestruct *oldcutbuffer, *oldcutbottom;
+
     /* If we cut the magicline, we may as well not crash. :/ */
     if (!u->cutbuffer)
 	return;
 
-    filestruct *oldcutbuffer = cutbuffer, *oldcutbottom = cutbottom;
+    oldcutbuffer = cutbuffer; oldcutbottom = cutbottom;
     cutbuffer = cutbottom = NULL;
 
     goto_line_posx(u->lineno, u->begin);
@@ -680,6 +682,7 @@ void do_undo(void)
     undo *u = openfile->current_undo;
     filestruct *f, *t = NULL;
     char *data, *undidmsg = NULL;
+    filestruct *oldcutbuffer, *oldcutbottom;
 
     if (!u) {
 	statusbar(_("Nothing in undo buffer!"));
@@ -786,7 +789,7 @@ void do_undo(void)
 #endif
     case INSERT:
 	undidmsg = _("text insert");
-	filestruct *oldcutbuffer = cutbuffer, *oldcutbottom = cutbottom;
+	oldcutbuffer = cutbuffer; oldcutbottom = cutbottom;
 	cutbuffer = NULL;
 	cutbottom = NULL;
 	openfile->mark_begin = fsfromline(u->mark_begin_lineno);
@@ -831,7 +834,7 @@ void do_undo(void)
 /* Redo the last thing(s) we undid. */
 void do_redo(void)
 {
-    filestruct *f;
+    filestruct *f, *shoveline;
     char *data, *redidmsg = NULL;
     undo *u = openfile->undotop;
 
@@ -882,7 +885,7 @@ void do_redo(void)
 	break;
     case ENTER:
 	redidmsg = _("line break");
-	filestruct *shoveline = make_new_node(f);
+	shoveline = make_new_node(f);
 	shoveline->data = mallocstrcpy(NULL, u->strdata);
 	data = mallocstrncpy(NULL, f->data, u->begin + 1);
 	data[u->begin] = '\0';
@@ -1399,10 +1402,11 @@ fprintf(stderr, "  >> Updating... action = %d, openfile->last_action = %d, openf
 	    if ((u->lineno == u->mark_begin_lineno && u->begin < u->mark_begin_x)
 			|| u->lineno < u->mark_begin_lineno) {
 		size_t x_loc = u->begin;
+		ssize_t line;
 		u->begin = u->mark_begin_x;
 		u->mark_begin_x = x_loc;
 
-		ssize_t line = u->lineno;
+		line = u->lineno;
 		u->lineno = u->mark_begin_lineno;
 		u->mark_begin_lineno = line;
 	    } else
@@ -1478,6 +1482,8 @@ bool do_wrap(filestruct *line)
 	/* The next line, minus indentation. */
     size_t next_line_len = 0;
 	/* The length of next_line. */
+	size_t old_x;
+	filestruct * oldLine;
 
     /* There are three steps.  First, we decide where to wrap.  Then, we
      * create the new wrap line.  Finally, we clean up. */
@@ -1521,8 +1527,8 @@ bool do_wrap(filestruct *line)
     add_undo(SPLIT_BEGIN);
 #endif
 
-    size_t old_x = openfile->current_x;
-    filestruct * oldLine = openfile->current;
+    old_x = openfile->current_x;
+    oldLine = openfile->current;
     openfile->current = line;
 
     /* Step 2, making the new wrap line.  It will consist of indentation
-- 
2.11.0

