From 3c04c33ea44f0c33d83afc1b65a81dc7c6ffee0a Mon Sep 17 00:00:00 2001
From: Gerasim Troeglazov <3dEyes@gmail.com>
Date: Mon, 15 Apr 2024 18:02:44 +1000
Subject: Add haiku support


diff --git a/CMakeLists.txt b/CMakeLists.txt
index 3bf1369..2f75e69 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -27,12 +27,12 @@ elseif (LINUX)
     list(APPEND project_langs ASM)
 endif()
 
-project(Telegram
-    LANGUAGES ${project_langs}
-    VERSION ${desktop_app_version_cmake}
-    DESCRIPTION "Official Telegram Desktop messenger"
-    HOMEPAGE_URL "https://desktop.telegram.org"
-)
+#project(Telegram
+#    LANGUAGES ${project_langs}
+#    VERSION ${desktop_app_version_cmake}
+#    DESCRIPTION "Official Telegram Desktop messenger"
+#    HOMEPAGE_URL "https://desktop.telegram.org"
+#)
 set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Telegram)
 
 get_filename_component(third_party_loc "Telegram/ThirdParty" REALPATH)
diff --git a/SendToAddon/Makefile b/SendToAddon/Makefile
new file mode 100644
index 0000000..5098366
--- /dev/null
+++ b/SendToAddon/Makefile
@@ -0,0 +1,12 @@
+NAME = Send\ to\ Telegram
+TYPE = SHARED
+APP_MIME_SIG = application/x-vnd.Telegram-SendTo
+SRCS = SendToTelegram.cpp
+LIBS = be
+OPTIMIZE := FULL
+WARNINGS = NONE
+RDEFS = resource.rdef
+
+DEVEL_DIRECTORY := \
+	$(shell findpaths -r "makefile_engine" B_FIND_PATH_DEVELOP_DIRECTORY)
+include $(DEVEL_DIRECTORY)/etc/makefile-engine
diff --git a/SendToAddon/SendToTelegram.cpp b/SendToAddon/SendToTelegram.cpp
new file mode 100644
index 0000000..c68a21d
--- /dev/null
+++ b/SendToAddon/SendToTelegram.cpp
@@ -0,0 +1,44 @@
+#include <limits.h>
+
+#include <StorageKit.h>
+#include <SupportKit.h>
+#include <AppKit.h>
+
+#include <add-ons/tracker/TrackerAddOn.h>
+
+const char* kTelegramSignature = "application/x-vnd.Telegram";
+
+void
+process_refs(entry_ref base_ref, BMessage* message, void* reserved)
+{
+	char **argv = new char*[ARG_MAX];
+
+	int argc = 0;
+	argv[argc++] = strdup("-sendpath");
+	argv[argc] = NULL;
+
+	BEntry entry;	
+	entry_ref ref;
+
+	int32 i;
+
+	for (i = 0; message->FindRef("refs", i, &ref) == B_OK; i++) {
+		if (entry.SetTo(&ref, true) != B_OK)
+			continue;
+		if (entry.IsDirectory())
+			continue;
+
+		BPath path;
+		entry.GetPath(&path);
+		argv[argc++] = strdup(path.Path());
+		argv[argc] = NULL;
+	}
+
+	if (argc > 1)
+		be_roster->Launch(kTelegramSignature, argc, argv);
+
+	for(i = 0; argv[i] != NULL; i++)
+		free(argv[i]);
+
+	delete[] argv;
+}
diff --git a/SendToAddon/objects.x86_64-cc13-release/Send to Telegram b/SendToAddon/objects.x86_64-cc13-release/Send to Telegram
new file mode 100755
index 0000000000000000000000000000000000000000..2045f588829f79ba0046d97d46d81d8b6ed91acd
GIT binary patch
literal 12223
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

literal 0
HcmV?d00001

diff --git a/SendToAddon/objects.x86_64-cc13-release/SendToTelegram.d b/SendToAddon/objects.x86_64-cc13-release/SendToTelegram.d
new file mode 100644
index 0000000..a156597
--- /dev/null
+++ b/SendToAddon/objects.x86_64-cc13-release/SendToTelegram.d
@@ -0,0 +1,4 @@
+# --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS FOLLOW ---
+objects.x86_64-cc13-release/SendToTelegram.o :
+
+# --- DO NOT MODIFY THIS LINE -- AUTO-DEPENDS PRECEDE ---
diff --git a/SendToAddon/objects.x86_64-cc13-release/SendToTelegram.o b/SendToAddon/objects.x86_64-cc13-release/SendToTelegram.o
new file mode 100644
index 0000000000000000000000000000000000000000..4dfe0efd029b2d150c7448197646acac4d7e8957
GIT binary patch
literal 4352
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

literal 0
HcmV?d00001

diff --git a/SendToAddon/objects.x86_64-cc13-release/resource.rsrc b/SendToAddon/objects.x86_64-cc13-release/resource.rsrc
new file mode 100644
index 0000000000000000000000000000000000000000..cf5f49cda95305e3f16399c5321ae7ffb684bd6c
GIT binary patch
literal 3147
zcmWFvW?*0t@ONPaQZ69O1|-M;AiWGgy)T&|W@Ioz*dXEmKmZb_1-qG>f#C?yV37H1
z*clj<Al5LP1F}PaZU6x#P6md02$NwUko^EE-U!so1QiESv~=gF`Ls&|qhUK5wxela
zG!2Y|G>}+Okdv95Sdy8ar(dC4mY1RzlA4p6UX+-t8=RV#5|YmVt=vF?0R|vGNJ^n3
zUje2TDn&E})?W;?D7hpxMIkLSC$*Ro<A}C*uqgEKbu$FH1r(N`RsuGl43!79q>$x-
zTri&z*gOgf33djVAqx@&0+70r%7WBl21y_fId1cTAzh+dTvC*pn9GotoSDYP!VtyE
zz{JSLWUtG(dRwUWK4p93^`7&NdQ@mKOxp4Kzg*M;){jgKY)rdyT&#2Rt(t8udvm>S
zOz=I>&(P7;`hUZwb*x9&nb^(acQ~JGa0yR|@C!K~da|=5;quQ@?WHMs8O3SYnW@=X
zS@C&x<@V(^<qr7=EHCw$<T9~r2{|}nOUTKITS9jBAG)+zXxGKfLZ>co7P=U4aKgoa
zo&6UBPEI^@=>p%W%NO`|UA(}@#j#g-C(DI*yG8bwolM>1aO~>Vrc(|(Lk^YhxpJ_5
z*Oz@wT+F)}_vK&I-_5jFZ>K7d_wSe$P_6Za*}KKKm@gdI?Xa`(P|emQrv$l}f$B5%
z+&@@#;pT2xPA*_1FxkDV0EZug-Qs_an>M-{ZRKKQWMs0}FoFo%%bh&recP<fmx~D~
zZ1?^NRQ0p!owGBYc;<64GcqyR#~*^KHeo*0Fnf1zGSCnvAxvRL@m3`kpcZCqT38ra
zun99WvSJfv1;rnRy}=B@zMj6IgaN|53{I~8!B&m|0rA0}?(nn}77*YFk_NR{1rbWZ
zT!Vr={r%v|+}(r0CV|@90uW_xo<6SeA&~*D!EjZ6&YoeZKou-N%mq>9>5OCwETMuD
hvlv7^B{eOvG^ZrKI3vHPB)PN%ZkEdCrY}Hc3;=6IKFI(8

literal 0
HcmV?d00001

diff --git a/SendToAddon/resource.rdef b/SendToAddon/resource.rdef
new file mode 100644
index 0000000..e5f8b64
--- /dev/null
+++ b/SendToAddon/resource.rdef
@@ -0,0 +1,36 @@
+resource app_signature "application/x-vnd.Telegram-SendTo";
+
+resource app_version {
+	major  = 1,
+	middle = 0,
+	minor  = 0,
+	variety = 0,
+	internal = 1,
+
+	short_info = "Send to Telegram",
+	long_info = "Send selected files to Telegram"
+};
+
+resource file_types message {
+	"types" = "application/octet-stream"
+};
+
+resource vector_icon {
+	$"6E6369660604005A0500020106023F2D01ABB6552BBE233F33AF499EC5487829"
+	$"0092B8EBFF1E5AA005F102000602BA6C443B6D6F3A833D398D6D4BD8904DC08F"
+	$"00888A85FFB0B2AE05C4070207375FB843CE80445764584E54CF55C9897460D3"
+	$"F9CA8775646E6873666B69656B6A6A5F6E3E773F773C77406FC039D28E346D02"
+	$"04B454C190B454C991B454B98FC2D2B312BAD1B312CAD3B312D150C190D150B9"
+	$"8FD150C991C2D2D00ECAD3D00EBAD1D00E0A08BD13B904D0EEBB14BF76C965BC"
+	$"40C6D5B582CA40B954C275BCD4C187BAF4BE820A03BB01BE6FD12FBB02BD2EB9"
+	$"250A03BBFEC63ABF76C93BD09BBB160A03D0C0BB40B971C27CB5A4CA110A03BA"
+	$"F4BE68BCDFC17AD0D9BB1D090A000100023EE9780000000000003EA3FE41B2B1"
+	$"4532B50A010101023F28320000000000003F1EC9C24BDB36864D0A020101023E"
+	$"EFE40000000000003EE67BB99B69420C9F0A030102023F5FC20000000000003F"
+	$"3403C2809BBB8D630A010102123F5FC20000000000003F3403C2809BBB8D6301"
+	$"178522040A030103023F5FC20000000000003F3403C2809BBB8D630A04010402"
+	$"3F5FC20000000000003F3403C2809BBB8D630A030105023F5FC2000000000000"
+	$"3F3403C2809BBB8D630A050106023F5FC20000000000003F3403C2809BBB8D63"
+};
+
+resource("BEOS:default_shortcut") "S";
diff --git a/Telegram/CMakeLists.txt b/Telegram/CMakeLists.txt
index 2e26bf4..c4dbcfb 100644
--- a/Telegram/CMakeLists.txt
+++ b/Telegram/CMakeLists.txt
@@ -93,6 +93,15 @@ PRIVATE
     desktop-app::external_xxhash
 )
 
+if (HAIKU)
+	target_link_libraries(Telegram
+	PRIVATE
+		be
+		jpeg
+		translation
+	)
+endif()
+
 target_precompile_headers(Telegram PRIVATE $<$<COMPILE_LANGUAGE:CXX,OBJCXX>:${src_loc}/stdafx.h>)
 nice_target_sources(Telegram ${src_loc}
 PRIVATE
@@ -1556,6 +1565,17 @@ if (NOT build_winstore)
     )
 endif()
 
+if (HAIKU)
+	remove_target_sources(Telegram ${src_loc}
+		platform/linux/notifications_manager_linux_dummy.cpp
+		platform/linux/notifications_manager_linux.cpp
+	)
+    nice_target_sources(Telegram ${src_loc}
+    PRIVATE
+		platform/linux/notifications_manager_haiku.cpp
+    )
+endif()
+
 if (DESKTOP_APP_DISABLE_WAYLAND_INTEGRATION)
     remove_target_sources(Telegram ${src_loc}
         platform/linux/linux_wayland_integration.cpp
@@ -1741,7 +1761,7 @@ else()
         set(bundle_identifier "com.tdesktop.Telegram")
     endif()
     set(bundle_entitlements "Telegram.entitlements")
-    if (LINUX AND DESKTOP_APP_USE_PACKAGED)
+    if (LINUX AND NOT HAIKU AND DESKTOP_APP_USE_PACKAGED)
         set(output_name "telegram-desktop")
     else()
         set(output_name "Telegram")
diff --git a/Telegram/SourceFiles/calls/group/calls_group_menu.cpp b/Telegram/SourceFiles/calls/group/calls_group_menu.cpp
index 51a9068..b5296bc 100644
--- a/Telegram/SourceFiles/calls/group/calls_group_menu.cpp
+++ b/Telegram/SourceFiles/calls/group/calls_group_menu.cpp
@@ -572,6 +572,7 @@ void FillMenu(
 			real->recordStartDateValue(),
 			handler));
 	}
+#ifndef Q_OS_HAIKU
 	if (addScreenCast) {
 		const auto sharing = call->isSharingScreen();
 		const auto toggle = [=] {
@@ -589,6 +590,7 @@ void FillMenu(
 				: tr::lng_group_call_screen_share_start(tr::now)),
 			toggle);
 	}
+#endif
 	menu->addAction(tr::lng_group_call_settings(tr::now), [=] {
 		if (const auto strong = weak.get()) {
 			showBox(Box(SettingsBox, strong));
diff --git a/Telegram/SourceFiles/core/core_settings.h b/Telegram/SourceFiles/core/core_settings.h
index 93e0727..33aa2ca 100644
--- a/Telegram/SourceFiles/core/core_settings.h
+++ b/Telegram/SourceFiles/core/core_settings.h
@@ -964,7 +964,7 @@ private:
 	rpl::variable<float64> _dialogsWidthRatio; // per-window
 	rpl::variable<int> _thirdColumnWidth = kDefaultThirdColumnWidth; // p-w
 	bool _notifyFromAll = true;
-	rpl::variable<bool> _nativeWindowFrame = false;
+	rpl::variable<bool> _nativeWindowFrame = true;
 	rpl::variable<std::optional<bool>> _systemDarkMode = std::nullopt;
 	rpl::variable<bool> _systemDarkModeEnabled = false;
 	rpl::variable<WindowTitleContent> _windowTitleContent;
diff --git a/Telegram/SourceFiles/core/sandbox.cpp b/Telegram/SourceFiles/core/sandbox.cpp
index 6feacdb..38f5f23 100644
--- a/Telegram/SourceFiles/core/sandbox.cpp
+++ b/Telegram/SourceFiles/core/sandbox.cpp
@@ -234,7 +234,7 @@ void Sandbox::setupScreenScale() {
 
 	const auto screen = Sandbox::primaryScreen();
 	const auto dpi = screen->logicalDotsPerInch();
-	const auto basePair = screen->handle()->logicalBaseDpi();
+	const auto basePair = screen->handle()->logicalDpi(); // TODO: requires a fix at the QPA level
 	const auto base = (basePair.first + basePair.second) * 0.5;
 	const auto screenScaleExact = dpi / base;
 	const auto screenScale = int(base::SafeRound(screenScaleExact * 20)) * 5;
@@ -257,9 +257,12 @@ Sandbox::~Sandbox() = default;
 
 bool Sandbox::event(QEvent *e) {
 	if (e->type() == QEvent::Quit && !Quitting()) {
-		Quit(QuitReason::QtQuitEvent);
-		e->ignore();
-		return false;
+		if (IsAppLaunched() && App().preventsQuit(QuitReason::QtQuitEvent)) {
+			e->ignore();
+			return false;
+		} else {
+			Quit(QuitReason::QtQuitEvent);
+		}
 	} else if (e->type() == QEvent::Close) {
 		Quit();
 	} else if (e->type() == DeadlockDetector::PingPongEvent::Type()) {
@@ -273,7 +276,7 @@ bool Sandbox::event(QEvent *e) {
 void Sandbox::socketConnected() {
 	LOG(("Socket connected, this is not the first application instance, sending show command..."));
 	_secondInstance = true;
-
+ 
 	QString commands;
 	const QStringList &lst(cSendPaths());
 	for (QStringList::const_iterator i = lst.cbegin(), e = lst.cend(); i != e; ++i) {
diff --git a/Telegram/SourceFiles/platform/linux/integration_linux.cpp b/Telegram/SourceFiles/platform/linux/integration_linux.cpp
index b2a8cf6..71882ef 100644
--- a/Telegram/SourceFiles/platform/linux/integration_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/integration_linux.cpp
@@ -19,12 +19,18 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include <QtCore/QAbstractEventDispatcher>
 #include <qpa/qwindowsysteminterface.h>
 
+#ifndef Q_OS_HAIKU
 #include <gio/gio.hpp>
 #include <xdpinhibit/xdpinhibit.hpp>
+#endif
 
 namespace Platform {
 namespace {
 
+#ifdef Q_OS_HAIKU
+class LinuxIntegration final : public Integration {
+};
+#else
 using namespace gi::repository;
 namespace GObject = gi::repository::GObject;
 
@@ -286,7 +292,7 @@ void LinuxIntegration::initInhibit() {
 		}),
 		nullptr);
 }
-
+#endif
 } // namespace
 
 std::unique_ptr<Integration> CreateIntegration() {
diff --git a/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp b/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
index 9e409b9..26a0700 100644
--- a/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
+++ b/Telegram/SourceFiles/platform/linux/linux_xdp_open_with_dialog.cpp
@@ -16,6 +16,15 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include <xdpopenuri/xdpopenuri.hpp>
 #include <xdprequest/xdprequest.hpp>
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#include <InterfaceKit.h>
+#include <StorageKit.h>
+#include <SupportKit.h>
+#include <MimeType.h>
+#include <Roster.h>
+#endif
+
 namespace Platform {
 namespace File {
 namespace internal {
@@ -27,6 +36,22 @@ using base::Platform::XdgActivationToken;
 } // namespace
 
 bool ShowXDPOpenWithDialog(const QString &filepath) {
+#ifdef Q_OS_HAIKU
+	BMessenger trackerMessenger("application/x-vnd.Be-TRAK");
+	if (trackerMessenger.IsValid()) {
+		update_mime_info(filepath.toUtf8().data(), false, true, false);
+
+		BEntry fileEntry(filepath.toUtf8().data());
+		entry_ref fileRef;
+		if (fileEntry.GetRef(&fileRef) == B_OK) {
+			BMessage openCommand(B_REFS_RECEIVED);
+			openCommand.AddRef("refs", &fileRef);
+			openCommand.AddInt32("launchUsingSelector", 0);
+			if (trackerMessenger.SendMessage(&openCommand) == B_OK)
+				return true;
+		}
+	}
+#else
 	auto proxy = XdpOpenURI::OpenURIProxy::new_for_bus_sync(
 		Gio::BusType::SESSION_,
 		Gio::DBusProxyFlags::NONE_,
@@ -120,7 +145,7 @@ bool ShowXDPOpenWithDialog(const QString &filepath) {
 	window.setWindowModality(Qt::ApplicationModal);
 	window.show();
 	loop.run();
-
+#endif
 	return true;
 }
 
diff --git a/Telegram/SourceFiles/platform/linux/main_window_linux.cpp b/Telegram/SourceFiles/platform/linux/main_window_linux.cpp
index e6a3b68..d4f771f 100644
--- a/Telegram/SourceFiles/platform/linux/main_window_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/main_window_linux.cpp
@@ -36,6 +36,10 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "base/platform/linux/base_linux_xcb_utilities.h"
 #endif // !DESKTOP_APP_DISABLE_X11_INTEGRATION
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtCore/QSize>
 #include <QtCore/QMimeData>
 #include <QtGui/QWindow>
@@ -220,6 +224,12 @@ void MainWindow::workmodeUpdated(Core::Settings::WorkMode mode) {
 	SkipTaskbar(windowHandle(), mode == WorkMode::TrayOnly);
 }
 
+#ifdef Q_OS_HAIKU
+bool MainWindow::isActiveForTrayMenu() {
+	return isVisible();
+}
+#endif
+
 void MainWindow::unreadCounterChangedHook() {
 	updateUnityCounter();
 }
diff --git a/Telegram/SourceFiles/platform/linux/main_window_linux.h b/Telegram/SourceFiles/platform/linux/main_window_linux.h
index 311ed3a..21c1ad3 100644
--- a/Telegram/SourceFiles/platform/linux/main_window_linux.h
+++ b/Telegram/SourceFiles/platform/linux/main_window_linux.h
@@ -21,6 +21,9 @@ namespace Platform {
 class MainWindow : public Window::MainWindow {
 public:
 	explicit MainWindow(not_null<Window::Controller*> controller);
+#ifdef Q_OS_HAIKU
+	bool isActiveForTrayMenu() override;
+#endif
 	~MainWindow();
 
 	void updateWindowIcon() override;
diff --git a/Telegram/SourceFiles/platform/linux/notifications_manager_haiku.cpp b/Telegram/SourceFiles/platform/linux/notifications_manager_haiku.cpp
new file mode 100644
index 0000000..21935f0
--- /dev/null
+++ b/Telegram/SourceFiles/platform/linux/notifications_manager_haiku.cpp
@@ -0,0 +1,294 @@
+/* 
+This file is part of Telegram Desktop for Haiku,
+
+For license and copyright information please follow this link:
+https://github.com/desktop-app/legal/blob/master/LEGAL
+
+Copyright (c) 2018-2021 Gerasim Troeglazov, 3dEyes@gmail.com
+*/
+
+
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+
+#include "platform/linux/notifications_manager_linux.h"
+
+#include "base/options.h"
+#include "base/platform/base_platform_info.h"
+#include "core/application.h"
+#include "core/sandbox.h"
+#include "core/core_settings.h"
+#include "data/data_forum_topic.h"
+#include "history/history.h"
+#include "history/history_item.h"
+#include "ui/empty_userpic.h"
+#include "main/main_session.h"
+#include "lang/lang_keys.h"
+#include "base/weak_ptr.h"
+#include "window/notifications_utilities.h"
+#include "styles/style_window.h"
+
+#define USE_HAIKU_UINT64
+#include "base/haiku_types.h"
+
+#include <AppKit.h>
+#include <SupportKit.h>
+#include <Notification.h>
+#include <InterfaceKit.h>
+#include <TranslationUtils.h>
+#include <OS.h>
+
+#define NOTIFY_MESSAGE_DEEP	16
+#define NOTIFY_PORT_NAME "tg_notify"
+#define NOTIFY_GATE_NAME "/bin/qnotify"
+#define NOTIFY_MESSAGE 'QNTF'
+
+#include <QObject>
+#include <QString>
+#include <QStringList>
+#include <QTimer>
+
+namespace Platform {
+namespace Notifications {
+
+bool Supported() {
+	return true;
+}
+
+void Finish() {
+}
+
+bool SkipAudio() {
+	return false;
+}
+
+bool SkipToast() {
+	return false;
+}
+
+bool SkipFlashBounce() {
+	return false;
+}
+
+bool SkipAudioForCustom() {
+	return false;
+}
+
+bool SkipToastForCustom() {
+	return false;
+}
+
+bool SkipFlashBounceForCustom() {
+	return false;
+}
+
+bool Enforced() {
+	return false;
+}
+
+bool ByDefault() {
+	return true;
+}
+
+bool WaitForInputForCustom() {
+	return false;
+}
+
+void MaybePlaySoundForCustom(Fn<void()> playSound) {
+	playSound();
+}
+
+void MaybeFlashBounceForCustom(Fn<void()> flashBounce) {
+	flashBounce();
+}
+
+void Create(Window::Notifications::System *system) {
+	if (Core::App().settings().nativeNotifications() && Supported()) {
+		auto result = std::make_unique<Manager>(system);
+		system->setManager(std::move(result));
+		return;
+	}
+	system->setManager(nullptr);
+}
+
+class Manager::Private : public QObject {
+
+public:
+	explicit Private(not_null<Manager*> manager);
+
+	void showNotification(
+		not_null<PeerData*> peer,
+		MsgId topicRootId,
+		Ui::PeerUserpicView &userpicView,
+		MsgId msgId,
+		const QString &title,
+		const QString &subtitle,
+		const QString &msg,
+		DisplayOptions options);
+
+	~Private();
+
+private:
+	void CheckNotificationAction();
+
+	QTimer *_checkNotificationTimer;
+	const not_null<Manager*> _manager;
+	int32 _portId;
+};
+
+Manager::Private::Private(not_null<Manager*> manager)
+: _manager(manager) {
+	_portId = create_port(NOTIFY_MESSAGE_DEEP, NOTIFY_PORT_NAME);
+	_checkNotificationTimer = new QTimer(this);
+	connect(_checkNotificationTimer, &QTimer::timeout, this, &Manager::Private::CheckNotificationAction);
+	_checkNotificationTimer->start(250);
+}
+
+Manager::Private::~Private() {
+	delete _checkNotificationTimer;
+	if (_portId > 0)
+		delete_port(_portId);
+}
+
+void Manager::Private::CheckNotificationAction()
+{
+	ssize_t msgSize;
+
+	do {
+		msgSize = port_buffer_size_etc(_portId, B_RELATIVE_TIMEOUT, 0);
+	} while (msgSize == B_INTERRUPTED);
+
+	if (msgSize < 0)
+		return;
+
+	char* buffer = new(std::nothrow) char[msgSize];
+	if (!buffer)
+		return;
+
+	int32 code;
+	status_t result;
+	do {
+		result = read_port(_portId, &code, buffer, msgSize);
+	} while (result == B_INTERRUPTED);
+
+	BMessage message;
+
+	if (result < 0 || code != NOTIFY_MESSAGE) {
+		delete[] buffer;
+		return;
+	}
+	
+	if (message.Unflatten(buffer) == B_OK) {
+		uint64 sessionId = message.GetUInt64("session", 0);
+		uint64 peerId = message.GetUInt64("peer", 0);
+		int64 messageId = message.GetInt64("message", 0);
+
+		const auto key = ContextId{
+			.sessionId = sessionId,
+			.peerId = PeerId(peerId),
+			.topicRootId = 0,
+		};
+		const auto notificationId = NotificationId{ .contextId = key, .msgId = messageId };
+
+		crl::on_main(this, [=] {
+			_manager->notificationActivated(notificationId);
+		});
+	}
+	delete[] buffer;
+}
+
+void Manager::Private::showNotification(
+	not_null<PeerData*> peer,
+	MsgId topicRootId,
+	Ui::PeerUserpicView &userpicView,
+	MsgId msgId,
+	const QString &title,
+	const QString &subtitle,
+	const QString &msg,
+	DisplayOptions options) {
+	auto titleText = title;
+	auto subtitleText = subtitle;
+	auto msgText = msg;
+
+	QString args = QString(
+		"mode:port "
+		"target:tg_notify "
+		"session:uint64:%1 "
+		"peer:uint64:%2 "
+		"message:int64:%3")
+		.arg(peer->session().uniqueId()).arg(peer->id.value).arg(msgId.bare);
+
+	BNotification notify(B_INFORMATION_NOTIFICATION);
+	notify.SetGroup("Telegram");
+	notify.SetTitle(titleText.toUtf8().data());
+	notify.SetContent(msgText.toUtf8().data());
+	entry_ref ref;
+	BEntry entry(NOTIFY_GATE_NAME);
+	entry.GetRef(&ref);
+	notify.SetOnClickFile(&ref);
+	notify.AddOnClickArg(BString(args.toUtf8().data()));
+
+	if (!options.hideNameAndPhoto) {
+		QImage userpic = Window::Notifications::GenerateUserpic(peer, userpicView);
+		BBitmap *icon = new BBitmap(BRect(0, 0, userpic.width() - 1, userpic.height() - 1), B_RGBA32);
+		icon->SetBits((void*)userpic.bits(), userpic.sizeInBytes(), 0, B_RGBA32);
+		notify.SetIcon(icon);
+		delete icon;
+	}
+
+	notify.Send();
+}
+
+Manager::Manager(not_null<Window::Notifications::System*> system)
+: NativeManager(system)
+, _private(std::make_unique<Private>(this)) {
+}
+
+Manager::~Manager() = default;
+
+void Manager::doShowNativeNotification(
+		not_null<PeerData*> peer,
+		MsgId topicRootId,
+		Ui::PeerUserpicView &userpicView,
+		MsgId msgId,
+		const QString &title,
+		const QString &subtitle,
+		const QString &msg,
+		DisplayOptions options) {
+	_private->showNotification(
+		peer,
+		topicRootId,
+		userpicView,
+		msgId,
+		title,
+		subtitle,
+		msg,
+		options);
+}
+
+void Manager::doClearAllFast() { }
+
+void Manager::doClearFromItem(not_null<HistoryItem*> item) { }
+
+void Manager::doClearFromHistory(not_null<History*> history) { }
+
+void Manager::doClearFromSession(not_null<Main::Session*> session) { }
+
+void Manager::doClearFromTopic(not_null<Data::ForumTopic*> topic) { }
+
+bool Manager::doSkipToast() const {
+	return false;
+}
+
+void Manager::doMaybePlaySound(Fn<void()> playSound) {
+	playSound();
+}
+
+void Manager::doMaybeFlashBounce(Fn<void()> flashBounce) {
+	flashBounce();
+}
+
+} // namespace Notifications
+} // namespace Platform
diff --git a/Telegram/SourceFiles/platform/linux/specific_linux.cpp b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
index 29b8879..f559014 100644
--- a/Telegram/SourceFiles/platform/linux/specific_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/specific_linux.cpp
@@ -26,6 +26,10 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "base/platform/linux/base_linux_xcb_utilities.h"
 #endif // !DESKTOP_APP_DISABLE_X11_INTEGRATION
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtWidgets/QApplication>
 #include <QtWidgets/QSystemTrayIcon>
 #include <QtCore/QStandardPaths>
@@ -49,6 +53,33 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include <iostream>
 
 namespace {
+	
+#ifdef Q_OS_HAIKU
+void HaikuAutostart(bool start) {
+	const auto home = QDir::homePath();
+	if (home.isEmpty()) {
+		return;
+	}
+
+	QFile file(home + "/config/settings/boot/launch/telegram-desktop");
+	if (start) {
+		if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
+			QTextStream out(&file);
+			out
+				<< "#!/bin/bash" << Qt::endl
+				<< "cd /system/apps" << Qt::endl
+				<< "./Telegram -autostart" << " &" << Qt::endl;
+			file.close();
+			file.setPermissions(file.permissions()
+				| QFileDevice::ExeOwner
+				| QFileDevice::ExeGroup
+				| QFileDevice::ExeOther);
+		}
+	} else {
+		file.remove();
+	}
+}
+#endif // Q_OS_HAIKU
 
 using namespace gi::repository;
 namespace GObject = gi::repository::GObject;
@@ -525,6 +556,10 @@ bool AutostartSupported() {
 }
 
 void AutostartToggle(bool enabled, Fn<void(bool)> done) {
+#ifdef Q_OS_HAIKU
+	HaikuAutostart(enabled);
+	return;
+#else
 	if (KSandbox::isFlatpak()) {
 		PortalAutostart(enabled, done);
 		return;
@@ -552,6 +587,7 @@ void AutostartToggle(bool enabled, Fn<void(bool)> done) {
 	if (done) {
 		done(enabled && success);
 	}
+#endif
 }
 
 bool AutostartSkip() {
@@ -617,7 +653,11 @@ QString psAppDataPath() {
 		}
 	}
 
+#ifdef Q_OS_HAIKU
+	return QStandardPaths::writableLocation(QStandardPaths::AppConfigLocation) + '/';
+#else
 	return QStandardPaths::writableLocation(QStandardPaths::AppLocalDataLocation) + '/';
+#endif
 }
 
 void psDoCleanup() {
@@ -727,6 +767,7 @@ bool OpenSystemSettings(SystemSettingsType type) {
 			}
 			options.push_back(std::move(command));
 		};
+		add("Media");
 		add("unity-control-center", "sound");
 		add("kcmshell6", "kcm_pulseaudio");
 		add("kcmshell5", "kcm_pulseaudio");
@@ -736,7 +777,7 @@ bool OpenSystemSettings(SystemSettingsType type) {
 		add("mate-volume-control");
 		add("pavucontrol-qt");
 		add("pavucontrol");
-		add("alsamixergui");
+		add("alsamixergui");		
 		return ranges::any_of(options, [](const Command &command) {
 			return QProcess::startDetached(
 				command.command,
diff --git a/Telegram/SourceFiles/platform/linux/tray_linux.cpp b/Telegram/SourceFiles/platform/linux/tray_linux.cpp
index ab1e34d..ca68579 100644
--- a/Telegram/SourceFiles/platform/linux/tray_linux.cpp
+++ b/Telegram/SourceFiles/platform/linux/tray_linux.cpp
@@ -294,7 +294,7 @@ void Tray::createIcon() {
 		const auto showXEmbed = [=] {
 			_aboutToShowRequests.fire({});
 			InvokeQueued(_menuXEmbed.get(), [=] {
-				_menuXEmbed->popup(QCursor::pos());
+//				_menuXEmbed->popup(QCursor::pos());
 			});
 		};
 
diff --git a/Telegram/ThirdParty/tgcalls/tgcalls/MediaManager.cpp b/Telegram/ThirdParty/tgcalls/tgcalls/MediaManager.cpp
index 88bdd22..6431130 100644
--- a/Telegram/ThirdParty/tgcalls/tgcalls/MediaManager.cpp
+++ b/Telegram/ThirdParty/tgcalls/tgcalls/MediaManager.cpp
@@ -1038,7 +1038,7 @@ void MediaManager::fillCallStats(CallStats &callStats) {
 }
 
 void MediaManager::setAudioInputDevice(std::string id) {
-#if defined(WEBRTC_IOS)
+#if defined(WEBRTC_IOS) || defined(__HAIKU__)
 #else
     SetAudioInputDeviceById(_audioDeviceModule.get(), id);
 #endif
diff --git a/Telegram/ThirdParty/tgcalls/tgcalls/group/GroupInstanceCustomImpl.cpp b/Telegram/ThirdParty/tgcalls/tgcalls/group/GroupInstanceCustomImpl.cpp
index eaf2172..2e982f8 100644
--- a/Telegram/ThirdParty/tgcalls/tgcalls/group/GroupInstanceCustomImpl.cpp
+++ b/Telegram/ThirdParty/tgcalls/tgcalls/group/GroupInstanceCustomImpl.cpp
@@ -2846,7 +2846,7 @@ public:
     }
 
     void setAudioOutputDevice(const std::string &id) {
-#ifndef WEBRTC_IOS
+#if !defined(WEBRTC_IOS) && !defined(__HAIKU__)
         _threads->getWorkerThread()->BlockingCall([&] {
             SetAudioOutputDeviceById(_audioDeviceModule.get(), id);
         });
@@ -2854,7 +2854,7 @@ public:
     }
 
     void setAudioInputDevice(const std::string &id) {
-#ifndef WEBRTC_IOS
+#if !defined(WEBRTC_IOS) && !defined(__HAIKU__)
         _threads->getWorkerThread()->BlockingCall([&] {
             SetAudioInputDeviceById(_audioDeviceModule.get(), id);
         });
diff --git a/Telegram/lib_base/base/haiku_types.h b/Telegram/lib_base/base/haiku_types.h
new file mode 100644
index 0000000..3a57ce2
--- /dev/null
+++ b/Telegram/lib_base/base/haiku_types.h
@@ -0,0 +1,24 @@
+#pragma once
+
+#ifdef Q_OS_HAIKU
+
+#define _SUPPORT_DEFS_H
+
+#ifdef __x86_64__
+#define int64 __haiku_int64
+#ifdef USE_HAIKU_UINT64
+#define uint64 __haiku_uint64
+#endif
+#else
+#define int32 __haiku_int32
+#define uint32 __haiku_uint32
+#endif
+
+typedef int32 status_t;
+typedef uint32 type_code;
+typedef uint32 perform_code;
+
+typedef int64 bigtime_t;
+typedef int64 nanotime_t;
+
+#endif
diff --git a/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp b/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
index 46365f5..381a977 100644
--- a/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_file_utilities_linux.cpp
@@ -26,8 +26,58 @@
 #include <stdio.h>
 #include <fcntl.h>
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#include <AppKit.h>
+#include <StorageKit.h>
+#endif
+
 namespace base::Platform {
 namespace {
+	
+#ifdef Q_OS_HAIKU
+bool HaikuShowInFolder(const QString &filepath) {
+	try {
+		BMessenger trackerMessenger("application/x-vnd.Be-TRAK");
+		if (!trackerMessenger.IsValid())
+			return false;
+
+		BEntry fileEntry(filepath.toUtf8().data());
+		entry_ref fileRef;
+		if (fileEntry.GetRef(&fileRef) != B_OK)
+			return false;
+
+		if (!fileEntry.Exists())
+			return false;
+
+		BEntry folderEntry;
+		if (fileEntry.GetParent(&folderEntry) != B_OK)
+			return false;
+
+		entry_ref folderRef;
+		if (folderEntry.GetRef(&folderRef) != B_OK)
+			return false;
+
+		BMessage openCommand(B_REFS_RECEIVED);
+		openCommand.AddRef("refs", &folderRef);
+		node_ref fileNodeRef;
+		if (fileEntry.GetNodeRef(&fileNodeRef) == B_OK) {
+			openCommand.AddData("nodeRefToSelect", B_RAW_TYPE,
+				static_cast<void*>(&fileNodeRef), sizeof(node_ref));
+		}
+		if (trackerMessenger.SendMessage(&openCommand) == B_OK) {
+			snooze(300000);
+			BMessage selectCommand('Tsel');
+			selectCommand.AddRef("refs", &fileRef);
+			trackerMessenger.SendMessage(&selectCommand);
+			return true;
+		}
+	} catch (...) {
+	}
+
+	return false;
+}
+#endif
 
 using namespace gi::repository;
 namespace GObject = gi::repository::GObject;
@@ -130,12 +180,19 @@ void DBusShowInFolder(const QString &filepath, Fn<void()> fail) {
 } // namespace
 
 void ShowInFolder(const QString &filepath) {
+#ifdef Q_OS_HAIKU
+	if (!HaikuShowInFolder(filepath)) {
+		QDesktopServices::openUrl(
+			QUrl::fromLocalFile(QFileInfo(filepath).absolutePath()));
+	}
+#else
 	DBusShowInFolder(filepath, [=] {
 		PortalShowInFolder(filepath, [=] {
 			QDesktopServices::openUrl(
 				QUrl::fromLocalFile(QFileInfo(filepath).absolutePath()));
 		});
 	});
+#endif
 }
 
 QString CurrentExecutablePath(int argc, char *argv[]) {
diff --git a/Telegram/lib_base/base/platform/linux/base_info_linux.cpp b/Telegram/lib_base/base/platform/linux/base_info_linux.cpp
index a40477a..8079f1d 100644
--- a/Telegram/lib_base/base/platform/linux/base_info_linux.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_info_linux.cpp
@@ -307,6 +307,7 @@ bool IsX11() {
 }
 
 bool IsWayland() {
+#ifndef Q_OS_HAIKU
 	if (!QGuiApplication::instance()) {
 		static const auto result = []() -> bool {
 			struct wl_display *(*wl_display_connect)(const char *name);
@@ -324,6 +325,7 @@ bool IsWayland() {
 		}();
 		return result;
 	}
+#endif
 	static const auto result
 		= QGuiApplication::platformName().startsWith("wayland");
 	return result;
diff --git a/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp b/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp
index b2db356..3e72834 100644
--- a/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_last_input_linux.cpp
@@ -18,6 +18,11 @@
 #include <xdgscreensaver/xdgscreensaver.hpp>
 #include <mutteridlemonitor/mutteridlemonitor.hpp>
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#include <InterfaceDefs.h>
+#endif
+
 namespace base::Platform {
 namespace {
 
@@ -99,9 +104,23 @@ std::optional<crl::time> MutterDBusLastUserInputTime() {
 	return (crl::now() - static_cast<crl::time>(std::get<1>(*result)));
 }
 
+#ifdef Q_OS_HAIKU
+std::optional<crl::time> HaikuLastUserInputTime() {	
+	const auto idle = idle_time() / 1000;
+	return (crl::now() - static_cast<crl::time>(idle));
+}
+#endif
+
 } // namespace
 
 std::optional<crl::time> LastUserInputTime() {
+#ifdef Q_OS_HAIKU
+	const auto haikuResult = HaikuLastUserInputTime();
+	if (haikuResult.has_value()) {
+		return haikuResult;
+	}
+#endif
+
 #ifndef DESKTOP_APP_DISABLE_X11_INTEGRATION
 	if (::Platform::IsX11()) {
 		const auto xcbResult = XCBLastUserInputTime();
diff --git a/Telegram/lib_base/base/platform/linux/base_linux_xdg_activation_token.cpp b/Telegram/lib_base/base/platform/linux/base_linux_xdg_activation_token.cpp
index 1898f9d..a91a51a 100644
--- a/Telegram/lib_base/base/platform/linux/base_linux_xdg_activation_token.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_linux_xdg_activation_token.cpp
@@ -15,7 +15,7 @@
 namespace base::Platform {
 
 void RunWithXdgActivationToken(Fn<void(QString)> callback) {
-#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0) && !defined(Q_OS_HAIKU)
 	const auto window = QGuiApplication::focusWindow();
 	if (!window) {
 		callback({});
diff --git a/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp b/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp
index af97691..1a0f256 100644
--- a/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_linux_xdp_utilities.cpp
@@ -10,6 +10,10 @@
 
 #include <xdpsettings/xdpsettings.hpp>
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtGui/QGuiApplication>
 #include <QtGui/QWindow>
 
diff --git a/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp b/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
index 3d851b8..dce45d2 100644
--- a/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_power_save_blocker_linux.cpp
@@ -17,6 +17,10 @@
 #include "base/platform/linux/base_linux_xcb_utilities.h"
 #endif // !DESKTOP_APP_DISABLE_X11_INTEGRATION
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtGui/QWindow>
 
 #include <xdpinhibit/xdpinhibit.hpp>
diff --git a/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp b/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
index 4197367..438c375 100644
--- a/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
+++ b/Telegram/lib_base/base/platform/linux/base_url_scheme_linux.cpp
@@ -9,6 +9,10 @@
 #include "base/integration.h"
 #include "base/debug_log.h"
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtGui/QGuiApplication>
 #include <QtWidgets/QWidget>
 
diff --git a/Telegram/lib_spellcheck/spellcheck/third_party/language_cld3.cpp b/Telegram/lib_spellcheck/spellcheck/third_party/language_cld3.cpp
index efbfb72..9c82321 100644
--- a/Telegram/lib_spellcheck/spellcheck/third_party/language_cld3.cpp
+++ b/Telegram/lib_spellcheck/spellcheck/third_party/language_cld3.cpp
@@ -4,6 +4,10 @@
 // For license and copyright information please follow this link:
 // https://github.com/desktop-app/legal/blob/master/LEGAL
 //
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include "spellcheck/third_party/language_cld3.h"
 
 #include "nnet_language_identifier.h"
diff --git a/Telegram/lib_ui/ui/platform/linux/ui_utility_linux.cpp b/Telegram/lib_ui/ui/platform/linux/ui_utility_linux.cpp
index eda2916..85b8ced 100644
--- a/Telegram/lib_ui/ui/platform/linux/ui_utility_linux.cpp
+++ b/Telegram/lib_ui/ui/platform/linux/ui_utility_linux.cpp
@@ -413,6 +413,7 @@ void ShowXCBWindowMenu(not_null<QWidget*> widget, const QPoint &point) {
 }
 #endif // !DESKTOP_APP_DISABLE_X11_INTEGRATION
 
+#ifndef __HAIKU__
 #if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
 void ShowWaylandWindowMenu(not_null<QWidget*> widget, const QPoint &point) {
 	static const auto wl_proxy_marshal_array = [] {
@@ -460,6 +461,7 @@ void ShowWaylandWindowMenu(not_null<QWidget*> widget, const QPoint &point) {
 		}.data());
 }
 #endif // Qt >= 6.5.0
+#endif
 
 } // namespace
 
@@ -533,7 +535,7 @@ std::optional<bool> IsOverlapped(
 }
 
 bool WindowMarginsSupported() {
-#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0) && !defined(__HAIKU__)
 	static const auto WaylandResult = [] {
 		using namespace QNativeInterface::Private;
 		QWindow window;
@@ -560,7 +562,7 @@ bool WindowMarginsSupported() {
 }
 
 void SetWindowMargins(not_null<QWidget*> widget, const QMargins &margins) {
-#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0) && !defined(__HAIKU__)
 	using namespace QNativeInterface::Private;
 	const auto window = not_null(widget->windowHandle());
 	const auto platformWindow = not_null(window->handle());
@@ -582,7 +584,7 @@ void SetWindowMargins(not_null<QWidget*> widget, const QMargins &margins) {
 }
 
 void UnsetWindowMargins(not_null<QWidget*> widget) {
-#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0) && !defined(__HAIKU__)
 	using namespace QNativeInterface::Private;
 	if (const auto native = not_null(widget->windowHandle())
 			->nativeInterface<QWaylandWindow>()) {
@@ -600,7 +602,7 @@ void UnsetWindowMargins(not_null<QWidget*> widget) {
 }
 
 void ShowWindowMenu(not_null<QWidget*> widget, const QPoint &point) {
-#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0)
+#if QT_VERSION >= QT_VERSION_CHECK(6, 5, 0) && !defined(__HAIKU__)
 	if (::Platform::IsWayland()) {
 		ShowWaylandWindowMenu(widget, point);
 		return;
diff --git a/Telegram/lib_ui/ui/ui_utility.cpp b/Telegram/lib_ui/ui/ui_utility.cpp
index 26b284f..5aa150c 100644
--- a/Telegram/lib_ui/ui/ui_utility.cpp
+++ b/Telegram/lib_ui/ui/ui_utility.cpp
@@ -9,6 +9,10 @@
 #include "ui/platform/ui_platform_utility.h"
 #include "ui/style/style_core.h"
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtWidgets/QApplication>
 #include <QtGui/QWindow>
 #include <QtGui/QtEvents>
diff --git a/Telegram/lib_ui/ui/widgets/popup_menu.cpp b/Telegram/lib_ui/ui/widgets/popup_menu.cpp
index 1c9c7f9..dbce473 100644
--- a/Telegram/lib_ui/ui/widgets/popup_menu.cpp
+++ b/Telegram/lib_ui/ui/widgets/popup_menu.cpp
@@ -18,6 +18,10 @@
 #include "base/invoke_queued.h"
 #include "base/platform/base_platform_info.h"
 
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include <QtGui/QtEvents>
 #include <QtGui/QPainter>
 #include <QtGui/QScreen>
diff --git a/Telegram/lib_webrtc/webrtc/details/webrtc_openal_adm.cpp b/Telegram/lib_webrtc/webrtc/details/webrtc_openal_adm.cpp
index e51bffa..733f6b5 100644
--- a/Telegram/lib_webrtc/webrtc/details/webrtc_openal_adm.cpp
+++ b/Telegram/lib_webrtc/webrtc/details/webrtc_openal_adm.cpp
@@ -4,6 +4,11 @@
 // For license and copyright information please follow this link:
 // https://github.com/desktop-app/legal/blob/master/LEGAL
 //
+
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include "webrtc/details/webrtc_openal_adm.h"
 
 #include "base/timer.h"
diff --git a/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.cpp b/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.cpp
index 6e19fcf..e7a6990 100644
--- a/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.cpp
+++ b/Telegram/lib_webrtc/webrtc/webrtc_audio_input_tester.cpp
@@ -4,6 +4,11 @@
 // For license and copyright information please follow this link:
 // https://github.com/desktop-app/legal/blob/master/LEGAL
 //
+
+#ifdef Q_OS_HAIKU
+#include <base/haiku_types.h>
+#endif
+
 #include "webrtc/webrtc_audio_input_tester.h"
 
 #include "webrtc/webrtc_device_common.h"
diff --git a/cmake/external/CMakeLists.txt b/cmake/external/CMakeLists.txt
index d9af92a..cd4ba1d 100644
--- a/cmake/external/CMakeLists.txt
+++ b/cmake/external/CMakeLists.txt
@@ -18,7 +18,7 @@ if (add_cld3_library)
     add_checked_subdirectory(cld3)
 endif()
 add_checked_subdirectory(crash_reports)
-if (LINUX)
+if (LINUX AND NOT HAIKU)
     add_checked_subdirectory(dispatch)
 endif()
 add_checked_subdirectory(expected)
-- 
2.43.2

